% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_possible_data.R
\name{make_possible_data}
\alias{make_possible_data}
\title{Make data for multi-step strategy}
\usage{
make_possible_data(model, given = NULL, N = list(1), within = TRUE,
  condition = list(TRUE), vars = NULL, prefix = NULL)
}
\arguments{
\item{model}{A causal model object generated by \code{make_model}.}

\item{given}{A data.frame with observations.}

\item{N}{An integer. Number of variables to seek.}

\item{within}{Logical. Whether to seek variables within existing data. Defaults to TRUE.}

\item{condition}{A list of character strings indicating for which cases data should be gathered. Options are: (i) to gather additional data on variables specified via \code{vars} for any possible cases in the model ("any"), (ii) to gather data in all cases within a given dataset ("within"), or (iii) to specify the subset of cases for which within-case data should be collected (e.g. "Y == 1").}

\item{vars}{A character vector. Variables to be sought or NA. If NA \code{make_possible_data} gathers data on all variables containing NA for the specified data strategy.}

\item{prefix}{for columns of output; useful if multiple dataframes are later merged}
}
\value{
A dataset with columns: event, strategy, plus possibly multiple cases profiles
}
\description{
Creates a database of possible data from a data strategy.
Users can gather additional data on variables specified via \code{vars} for any possible cases in the model ("any"). Or they can
gather data in all cases within a given dataset ("within"). Or they can specify  the subset of cases for which within-case data should be collected (e.g. "Y == 1").
}
\examples{
model <- make_model("X->M->Y")  \%>\%
   set_restrictions(c("Y[M=1]<Y[M=0]"), "(M[X=1]<M[X=0] ") \%>\%
   set_parameter_matrix()
df <- data.frame(X = c(0,0,0,1,1,1), M = NA, Y = c(0,0,1,0,1,1))
given <- collapse_data(df, model)[, -2]

# Look for data on M for all possible cases in the given data
make_possible_data(model, N = 0, within = FALSE)
make_possible_data(model, N = 2, within = FALSE)
make_possible_data(model, given, vars = list("M"), within = TRUE, N = 2)
make_possible_data(model, given = given, vars = "M", N = 2, condition = c("X==Y"))
make_possible_data(model, given = given, vars = "M", N = list(1,1), condition = list("X==Y", "X==Y"))

# Not possible:
make_possible_data(model, given, vars = "M", within = TRUE, N = 7)

# Partly possible: only one step completed
make_possible_data(model, given, vars = list("M", "M"), within = TRUE, N = list(1,1), condition = list("X==Y", "X==Y & M==1"))

# Within conditions
make_possible_data(model, given, within = TRUE, N = 2, condition = "X==1 & Y==1", vars = "M")
make_possible_data(model, given, within = TRUE, N = 3, condition = "Y==1", vars = "M")
make_possible_data(model, given, within = TRUE, condition = "X == 1 | Y == 1", vars = "M")

# Look for data on K but not M
model <- make_model("X->M->Y <-K")   \%>\%
   set_parameter_matrix()
df <- data.frame(X = c(0,0,1,1,1), K = NA, M = NA, Y = c(0,0,0,1,1))
given <- collapse_data(df, model)[, -2]
make_possible_data(model, given, within = TRUE, N = 1, vars = "K")
make_possible_data(model, given, within = TRUE, N = 1, vars = "K")

# Look for data on M when X = 1 and Y = 0
make_possible_data(model,
                   given,
                   condition =  "X == 1 & Y == 0",
                   vars ="M")

model <- make_model("X->M->Y")   \%>\%
   set_parameter_matrix()
make_possible_data(model,
                   given = NULL,
                   N = list(3,1),
                   within = FALSE,
                   condition =  list(TRUE, "X == 1 & Y == 0"),
                   vars = list(c("X", "Y"), "M"))


# From book

model <- make_model("X->M->Y")  \%>\%
 set_restrictions(c("(Y[M=1]<Y[M=0])", "(M[X=1]<M[X=0])")) \%>\%
	set_parameter_matrix() \%>\%
	set_parameters(type = "flat")

	given <-  collapse_data(data.frame(X = c(0,0,0,1,1,1), M = NA, Y = c(0,0,1,0,1,1)),
													model, remove_family = TRUE)
	make_possible_data(model,
 	given = given,
 	vars = list("M", "M", "M", "M"),
 	within = TRUE,
 	N = list(1,1,1,1),
 	condition = list("X==0 & Y==0", "X==1 & Y==0", "X==0 & Y==1", "X==1 & Y==1"))
}

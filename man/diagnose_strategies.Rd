% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diagnose_strategies.R
\name{diagnose_strategies}
\alias{diagnose_strategies}
\title{Diagnose a data strategy}
\usage{
diagnose_strategies(
  reference_model = NULL,
  analysis_model,
  observed = NULL,
  queries,
  given = TRUE,
  expand_grid = FALSE,
  data_strategies = list(strategy1 = list(N = 1, withins = TRUE, vars = NULL, conditions
    = list(TRUE))),
  sims = 1000,
  iter = NULL,
  chains = 4,
  refresh = 1000,
  use_parameters = FALSE,
  estimands_database = NULL,
  estimates_database = NULL,
  possible_data_list = NULL,
  fit = NULL,
  add_MSE = TRUE
)
}
\arguments{
\item{reference_model}{A causal model as created by \code{make_model}}

\item{analysis_model}{A causal model as created by \code{make_model}}

\item{observed}{A data frame with existing data}

\item{queries}{Vector of causal statements characterizing queries}

\item{given}{Vector of statements refining queries}

\item{expand_grid}{Logical, expands grid over query arguments (queries, given)}

\item{data_strategies}{list containing arguments for data strategies.
For instance \code{list(strategy1 = list(N=1, withins = TRUE, vars = NULL, conditions = list(TRUE)))}}

\item{sims}{Integer, number of estimand draws, defaults to max(sims, 4000)}

\item{iter}{Integer, passed to stan, defaults to 4000}

\item{chains}{Integer, passed to stan, defaults to 4}

\item{refresh}{Integer, passed to stand, defaults to 1000,}

\item{use_parameters}{Logical, defaulting to FALSE. If TRUE use  parameter vector rather than priors/posteriors.
Used in process tracing problems with a single case.
In this case the estimand is taken to be case level and is drawn  *conditional on case data*,
and the posterior variance is defined on the type, not the parameter (which is known, after all).}

\item{estimands_database}{Database of estimands, optional, for speed}

\item{estimates_database}{Database of estimates, optional, for speed}

\item{possible_data_list}{Database of possible data, optional, for speed}

\item{add_MSE}{Calculate Logical: Calculate MSE and add to output. FALSE speeds up analysis marginally.}
}
\value{
A dataframe
}
\description{
Diagnose a data strategy
}
\examples{

fit <- fitted_model()

# Simple illustration of updating on a probability given a uniform prior.
# MSE and Expected posterior variance should both be 1/18
diagnosis <- diagnose_strategies(
  analysis_model = make_model("X -> Y"),
  data_strategies = list(
		take_one =  list(N=1, withins = FALSE, vars = list(c("X")), conditions = TRUE)),
  queries = "X==1",
  fit = fit,
  sims = 2000)
diagnosis

# Example using parameters and  minimal arguments, assumes search for one case
# But nothing learned about parameters
# FLAG: FOr this to function: make_estimates_database has to treat "conditions" as given data
model <- make_model("X->M->Y") \%>\% set_restrictions(c(decreasing("X","M"), decreasing("M","Y")))
diagnosis <- diagnose_strategies(
  analysis_model = model,
  queries = "Y[X=1]> Y[X=0]",
  use_parameters = TRUE,
  observed = collapse_data(data.frame(X = 1), model, remove_family = TRUE),
  data_strategies = list(
   strategy1 = list(N=1, withins = TRUE, vars = "M", conditions = TRUE),
   strategy2 = list(N=1, withins = TRUE, vars = list(c("M", "Y")), conditions = TRUE)
   )
   )

# Example with minimal arguments, assumes search for one case, updating on parameters
diagnosis <- diagnose_strategies(
  analysis_model = make_model("X->Y"),
  queries = "Y[X=1]==1",
  sims = 10)

# Example comparing two data strategies with two queries
 rm(list = ls())
if(!exists("fit")) fit  <- fitted_model()

analysis_model <-
   make_model("X->M->Y")  \%>\%
   set_restrictions(c("Y[M=1]<Y[M=0]", "M[X=1]<M[X=0]")) \%>\%
   set_parameter_matrix()

observed   <- data.frame(X = c(0,0,0,1,1,1), M = NA, Y = c(0,0,1,0,1,1)) \%>\%
             collapse_data(analysis_model, remove_family = TRUE)

queries <- list(ATE = "Y[X=1]-Y[X=0]", PC = "Y[X=1]-Y[X=0]")

given <- list(TRUE, "Y==1 & X==1") # given for queries

data_strategies <- list(
  strategy1 = list(N=1, withins = TRUE, vars = "M", conditions = list("Y==1 & X==1")),
  strategy2 = list(N=1, withins = TRUE, vars = "M", conditions = list("Y==X")))

diagnosis <- diagnose_strategies(
  analysis_model = analysis_model,
  data_strategies = data_strategies,
  observed = observed,
  queries = queries,
  given = given,
  sims = 4000,
  fit = fit)
diagnosis

# Wide or deep illustration

rm(list = ls())

model <- make_model("K-> X -> Y <- K")
data_strategies = list(
		N4L0 =  list(N=4, withins = FALSE, vars = list(c("X", "Y")), conditions = TRUE),
		N2L2 =  list(N=2, withins = FALSE, vars = list(c("X", "K", "Y")), conditions = TRUE),
		N3L1 =  list(N=list(1,2), withins = FALSE, vars = list(c("X", "K", "Y"), c("X", "Y")), conditions = TRUE))

	possible_data_list = lapply(data_strategies, function(ds)
		with(ds, make_possible_data(model = model, observed = NULL,
		N = N, withins = withins, conditions = conditions, vars = vars)))

lapply(possible_data_list, length)

diagnosis <- diagnose_strategies(
  analysis_model = model,
  data_strategies = data_strategies,
  queries = "Y[X=1] - Y[X=0]",
  fit = fit,
  possible_data_list = possible_data_list)
diagnosis


}
